/**
  
  @page install_linux Building %OpenMS on GNU/Linux
  We are working on adding %OpenMS to the repositories of the most popular distributions, but for now
  the toolkit needs to be manually compiled on your system.

  You can find the Release and Development (svn) versions on http://open-ms.sourceforge.net/downloads/.

  From here on the instructions assume you have an extracted tar.gz of the <a href="https://sourceforge.net/projects/open-ms/files/OpenMS/">Release</a>, or checked out the 
  Development (svn) version by <pre>svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS</pre>

  @section Dependencies
  Before building from source, %OpenMS requires several other libraries to be present on your system. Most of these 
  should be available in the repositories of your GNU/Linux distribution.

  For the libraries/versions often not found in those repositories, we provide sources and build scripts.
  The Release tar.gz archive contains the libraries in the contrib/ folder, if you build the Development (svn) 
  version, you'll have to check them out separately (see below in @ref build_linux_contrib).
  
  <b>Required packages and libraries</b>
  
  Essential are GCC > 4.0 or other ANSI C++ compiler, CMake > 2.8.3, Qt4 > 4.5, patch, autoconf > 2.60, automake > 1.9, libtool (libtoolize/glibtoolize).

  For the complete feature set to be enabled, %OpenMS needs recent versions of Boost, GSL, libSVM, SeqAn, glpk, zlib, libbz2, and Xerces-C.

  Building the documentation from the Development version requires doxygen > 1.5.4 and pdflatex/texlive/texlive-full.


  For the most common distributions, these commands will install most of the libraries:

  <table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;" cellpadding="3px">
  <tr>
    <td><B>Fedora </B> 
    also look <a href="http://koji.fedoraproject.org/koji/packages">here</a>
	</td>
    <td><pre>
    sudo yum install cmake gcc gcc-g++ autoconf autoconf-2.6 qt-devel
    </pre>
    </td>
  </tr>                
  <tr>
    <td><B>OpenSuse 11.1</B></td>
    <td><pre>
    sudo zypper install cmake gcc-g++ autoconf libqt4-devel
    </pre></td>
  </tr>
  <tr>
    <td><B>Ubuntu/Debian (12.04/6.0 or later recommended)</B></td>
    <td><pre>
    sudo apt-get install cmake g++ autoconf qt4-dev-tools patch libtool make libxerces-c-dev libgsl0-dev libboost-regex-dev \
    libboost-iostreams-dev libboost-date-time-dev libboost-math-dev libsvm-dev libglpk-dev libzip-dev zlib1g-dev
    </pre></td>

  </tr>
  </table>


  @section build_linux_contrib Building remaining dependencies
  @note In most cases, the only dependency left unresolved at this point is SeqAn. You can check which dependencies you still need by attempting to configure %OpenMS (see the next section), it will complain about anything unusual. Contact us if you still have trouble with the dependencies after these instructions.

  The %OpenMS Release package (https://sourceforge.net/projects/open-ms/files/OpenMS/) contains the sources of all
  dependencies in the contrib/ folder.

  For the Development (svn) version, this folder is not included, it has to be checked out separately (and referred to later):
  <pre>svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/contrib</pre>
  
  from the contrib/ folder, execute the following command to build SeqAn: (The other build scripts can be listed by substituting <i>SEQAN</i> with <i>LIST</i>)

  <pre>
  cmake -DBUILD_TYPE=SEQAN ./
  </pre>

  To avoid problems while building the libraries contained in the contrib package, the path
  to your contrib directory should not have any spaces in it.

  
  @section install_linux_openms Configuring and building OpenMS/TOPP

  <a href="http://www.cmake.org/">CMake</a> is used to check the system and create the 'Makefile'.

  From the root directory of the package (or the checked out svn branch of %OpenMS), execute the following command to <i>configure</i> %OpenMS to build in bin/ and lib/,<br>
  substituting <b>/PATH/TO/contrib/</b> by the actual path to the directory of the previous step (for the Release package it is just <i>contrib/</i>):
  <pre>
  cmake -DCMAKE_FIND_ROOT_PATH="/usr;/usr/local;/PATH/TO/contrib" -DBOOST_USE_STATIC=OFF .
  </pre>
  
  In order to <i>build</i> the %OpenMS library and TOPP tools execute the following command:
  <pre>
  make
  </pre>
  
  @subsection linux_openms_environment Getting your environment ready to use OpenMS

  The previous step takes the most time, in the meanwhile you can prepare your environment for easy %OpenMS usage:
  
  Make sure to add <b>/PATH/TO/OpenMS/lib/</b> (e.g. <i>/home/smith/OpenMS/lib/</i>) to the environment variable <b>LD_LIBRARY_PATH</b>.
  The best way is to edit $HOME/.bashrc and add the following
  <pre>
  export LD_LIBRARY_PATH="/PATH/TO/OpenMS/lib:$LD_LIBRARY_PATH"
  </pre>
  
  The TOPP tools will be built in the <b>/PATH/TO/OpenMS/bin/</b> folder. Add this path to the environment variable <b>PATH</b> to use the commands anywhere on your system. 
  
  This is necessary to use the TOPP tools from TOPPView.
  
  You can do this by appending the following also to your $HOME/.bashrc
  (Do not use the tilde character @em ~ to abbreviate your home folder) 
  <pre>
  export PATH=$PATH:/PATH/TO/OpenMS/bin
  </pre>

  Apply both changes by executing <pre>. ~/.bashrc </pre>
  
  @section running_linux_openms Running OpenMS
  If the build from @ref install_linux_openms is ready, you can now run a GNU/Linux %OpenMS tool by e.g. executing
  <pre>
  FileInfo
  </pre>


<hr>
  @section advanced_linux_openms Advanced Options




  Advanced users can list the separate make targets by calling:
  <pre>
  make targets
  </pre>
  
  You can set more CMake variables adding <code>-DVARIABLE=VALUE</code> options in step @ref install_linux_openms.
  
  The most important CMake variables are:

  <table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;">
    <tr>
      <td valign="top">INSTALL_PREFIX</td>
      <td>the path where the bin/ and lib/ directories should be installed to (when <pre>sudo make install</pre> is wished for a system-wide install: e.g. -DINSTALL_PREFIX=/usr/local/)
          <BR>
          <b>Note:</b> Moving these directories after installing is not supported. 

	<b>For development, install prefixes are not supported. In this case %OpenMS must
	be built in place!</b>
     </td>
    </tr>
    <tr>
      <td valign="top">CMAKE_FIND_ROOT_PATH</td>
      <td>Additional search path for the contrib libraries.
          If not set the location is assumed to be <pre>contrib/</pre> as packaged in the Release tar.gz.</td>
    </tr>
    <tr>
      <td valign="top">QT_QMAKE_EXECUTABLE</td>
      <td>Defines the Qt 'qmake' application. The corresponding Qt installation is used.</td>
    </tr>
    <tr>
      <td valign="top">CMAKE_BUILD_TYPE</td>
      <td>Should be either 'Release' (optimization enabled) or 'Debug' (debug info and 
          precondition/postcondition checks enabled).
          @n The default is 'Release'.</td>
    </tr>
    <tr>
      <td valign="top">QT_DB_PLUGIN</td>
      <td>Defines the Qt database type. By default MySQL is used.</td>
    </tr>
    <tr>
      <td valign="top">CMAKE_CXX_COMPILER</td>
      <td>Defines the C++ compiler to use.</td>
    </tr>
    <tr>
      <td valign="top"><pre>CMAKE_C_COMPILER</pre></td>
      <td>Defines the C compiler to use. This should match the C++ compiler. Mixing compilers (e.g., <pre>clang++</pre> for C++ and <pre>gcc</pre> for C)
       can lead to undefined behavior as some internal settings (e.g., %OpenMP support) are determined using the C compiler and are assumed to be the 
       same for the C++ compiler.</td>
    </tr>    
    <tr>
      <td valign="top"><pre>SEARCH_ENGINES_DIRECTORY</pre> (optional)</td>
      <td>The location where the ID search engines (X!Tandem, OMMSA, MyriMatch) are located. This directory should have the same structure as the example in the %OpenMS svn repository: https://open-ms.svn.sourceforge.net/svnroot/open-ms/THIRDPARTY/SEARCHENGINES/.

      This directory is needed to build the installer for %OpenMS.</td>
    </tr>        
    <tr>
      <td valign="top">PYOPENMS</td>
      <td>Use ON to also build the Python bindings, see also @ref pyOpenMS.</td>
    </tr>
  </table>
  
  A full list of the CMake variables is shown when you execute
  <pre>
  ccmake .
  </pre>
  This works only after having executed <pre>cmake .</pre>

  
<HR>

  @section install_linux_testing_openms Testing your %OpenMS/TOPP installation  
  
  After you have installed %OpenMS and TOPP, you should verify your installation by executing the following command:
  <pre>
  make test_build
  make test
  </pre>
  
  @note To enable DB connectivity tests, use the following CMake parameters:
  - DB_TEST
  - DB_TEST_HOST
  - DB_TEST_PORT
  - DB_TEST_DB
  - DB_TEST_USER
  - DB_TEST_PW
*/
