// --------------------------------------------------------------------------
//                   OpenMS -- Open-Source Mass Spectrometry               
// --------------------------------------------------------------------------
// Copyright The OpenMS Team -- Eberhard Karls University Tuebingen,
// ETH Zurich, and Freie Universitaet Berlin 2002-2012.
// 
// This software is released under a three-clause BSD license:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of any author or any participating institution 
//    may be used to endorse or promote products derived from this software 
//    without specific prior written permission.
// For a full list of authors, refer to the file AUTHORS. 
// --------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING 
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// --------------------------------------------------------------------------
// $Maintainer:  $
// $Authors: Marc Sturm $
// --------------------------------------------------------------------------

// ATTENTION:
// Please write OpenMS like this:  %OpenMS
// Otherwise a link to the namespace is created.
// Thanks!

/**
	@page FAQ_Internal Internal FAQ

	<H2 style="border-top:2px solid grey;">General information</H2>
		<UL>

			<LI><B>I am new to %OpenMS. What should I do first?</B><BR>
				<OL>
					<LI> Check out the development version of %OpenMS (see website).
					<LI> Try and build %OpenMS according to the installation instructions.
					<Li> Read the %OpenMS Coding Convention.
					<LI> Read the %OpenMS Tutorial.
					<LI> Create a SourceForge account and send your account name to your supervisor.<BR>
					     He then adds you to the %OpenMS developers team.
					<LI> Register to the open-ms-general and open-ms-developers mailing list.<BR>
					     (You can see the developers list only if you are logged in to Sourceforge and
					     if you are a %OpenMS developer).
				</OL>

			<LI><B>Is there a central URL for %OpenMS developers?</B><BR>
				<BR>
				@n https://sourceforge.net/apps/trac/open-ms/
				<BR>
				In the TRAC has a Wiki with important links, the svn timeline and more.

			<LI><B>How do I update the website?</B><BR>
				 
				 Login to the wordpress admin area at www.openms.de/wp-admin
				 with your username and password assigned by the current Homepage maintainers.

	    <LI><b>Can I use QT designer to create GUI widgets?</b><BR>
	      Yes! If you want to create a class called @a Widget:

	      <UL>
	        <LI>Create .ui-File with QT designer and store it as
	        <TT>Widget.ui</TT>.

	        <LI>Add the class to the <TT>sources.cmake</TT>.
	        <LI>From the .ui-File the file
	        <TT>include/OpenMS/VISUAL/UIC/ClassTemplate.h</TT> is
	        generated by the build system.
	        <BR>
	        DO NOT CHECK-IN THIS FILE, AS IT IS GENERATED
	        AUTOMATICALLY, WHEN NEEDED!!!

	        <LI>Derive the class <TT>Widget</TT> from
	        <TT>WidgetTemplate</TT>. You need to check in the
	        <TT>Widget.h</TT> and <TT>Widget.C</TT> files.
	      </UL>

			<LI><b>Can the START_SECTION-macro not handle template methods that have two or more arguments?</b><BR>
				Put round brackets around the method declaration. Then it should work.

			<LI><b>Are there binary installers created from the SVN HEAD?</b><BR>
			Currently binary installers from the HEAD are available only for Windows:
			@n http://ftp.mi.fu-berlin.de/bielow/OpenMS/

		</UL>


  <H2 style="border-top:2px solid grey;">Build system</H2>
		<UL>

      <LI><B>What is CMake?!</B><BR>
        CMake builds BuildSystems for different platforms, e.g. VisualStudio Solutions on Windows, Makefiles on Linux etc.
        This allows us to define in one central location (namely CMakeLists.txt) how %OpenMS is build and have the platform specific stuff handled by CMake.
        See http://www.cmake.org for more information.<BR>

      <LI><B>How do I use CMake?!</B><BR>
        See Installation instructions for your platform.
        In general, you call CMake(.exe) with some parameters to create the native build-system. Afterwards you can (but usually don't have to
        edit the current configuration using a GUI named ccmake (or CMake-GUI in Windows), which ships with CMake).<BR>
        <B>Note:</B> whenever ccmake is mentioned in this document, substitute this by CMake-GUI if your OS is Windows. You can also edit the CMakeCache.txt file directly.

      <LI><B>How do I generate a build-system for Eclipse, KDevelop, CodeBlocks etc?!</B><BR>
      	Type <code>cmake</code> into a console. This will list the available code generators available on your platform, which you can pass to CMake using the <TT>-G</TT> option.

      <LI><B>What are user definable CMake Cache Variables?!</B><BR>
        They allow the user to pass options to CMake which will influence the build system.
        The most important option which should be given when calling CMake.exe is:
        - CMAKE_FIND_ROOT_PATH, which is where CMake will search for additional libraries if they are not found in the default system paths.
          By default we add %OpenMS/contrib. If your have installed all
					libraries on your system already there is no need to change CMAKE_FIND_ROOT_PATH.
					If you need the contrib, you will need to set this variable. On Windows, you always need the contrib, as there are no system developer packages.
        To pass this variable to CMake use the -D switch
        e.g. <code>cmake -D CMAKE_FIND_ROOT_PATH:PATH="D:\\svn\\contrib"</code>
        Everything else can be edited using ccmake afterwards. The following options are of interest:
          - CMAKE_BUILD_TYPE
          - CMAKE_FIND_ROOT_PATH
          - STL_DEBUG
          - DB_TEST
          - QT_DB_PLUGIN
          - MT_CUDA_BUILD_TYPE
        Their description will be displayed when you call ccmake.

			<LI><B>Can I use another solver than GLPK?!</B><BR>
				Yes, but by default the build system only links against GLPK (this is how %OpenMS binary packages must be build!).
				To use another solver try <code>cmake ... -D USE_COINOR=1 ....</code>
				And look at the documentation of the LPWrapper class.

      <LI><B>How do I switch to Debug/Release configuration?!</B><BR>
        For Makefile generators (typically on Linux) you can set the CMAKE_BUILD_TYPE variable to either
        Debug or Release by calling ccmake.
        <BR>
        For Visual Studio, this is not necessary as all configurations are generated and
        you can choose the one you like within the IDE itself.
        <BR>
				The 'Debug' configuration enabled debug information.
				The 'Release' configuration disables debug information and enables optimization.
				
      <LI><B>I changed the contrib path, but re-running CMake won't change the library paths?!</B><BR>
      	Once a library is found and its location is stored in a cache variable, it will only be searched again if the corresponding entry in the cache file is set to false. 
				You can simply delete the CMakeCache.txt, but all other custom settings will be lost as well.

      <LI><B>What are the most useful (make) targets?!</B><BR>
        In Visual Studio you can see all targets on the left. For Makefiles type <TT>make help</TT>.<BR>
        However, this list is quite long. The most useful targets will be shown to you by calling the
        <TT>targets</TT> target, i.e. <TT>make targets</TT>.

      <LI><B>CMake can't seem to find a Qt library (usually QtCore)! What now?</B><BR>
        CMake finds QT by looking for 'qmake' in your PATH or for the Environment Variable QTDIR! Set these accordingly.<BR>
        If the problem still persists: do you have a second installation of Qt (especially the MinGW version?)?
        This might lead CMake to the wrong path (it's searching for the Qt*.lib files).
        You should only move/delete the offending Qt version if you know what you are doing!
        A save workaround is to edit the CMakeCache file (e.g. via ccmake) and set all paths relating to QT (e.g. QT_LIBRARY_DIR) manually.

      <LI><B>(Windows) What version of Visual Studio should I use?</B><BR>
        Use the latest if you can. Get the latest CMake, as its generator needs to support your VS.
				If your VS is too new and there is no CMake for that yet, you're gonna be faced with a lot of
				conversion issues. This happens whenever the Build-System calls CMake (which can be quite often, e.g., after changes to CMakeLists.txt).

      <LI><b>How do I add a new class <TT>MyClass</TT> to the build system?</b><BR>
        <OL>
          <LI>Create the new class (header in include/ and C file in source/)
          <LI>Add both to the respective sources.cmake file in the same directory.
          <LI>Add them to svn version control and set the svn:eol-style property to native<BR>
              e.g. 
@code
svn propset svn:eol-style native MyClass.h
svn propset svn:eol-style native MyClass.C
@endcode
        </OL>

	    <LI><b>How do I add a new directory <TT>MYDIR</TT> to the build system?</b><BR>
        <OL>
          <LI>Create two new sources.cmake files (one for %OpenMS/source/MYDIR, one for %OpenMS/include/MYDIR), using existing sources.cmake files as template
					<LI>Add the new sources.cmake file from %OpenMS/source/MYDIR and %OpenMS/include/MYDIR to %OpenMS/cmake/includes.cmake.
					<LI>If you created a new directory directly under %OpenMS/source, then have a look at %OpenMS/source/TEST/executables.cmake (1. add a new section that
							makes the unit testing system aware of the new (upcoming) tests, 2. look at the very bottom and augment "TEST_executables").
							Add a new group target to %OpenMS/source/TEST/CMakeLists.txt
        </OL>

	    <LI><b>How do I add a new test for the class <TT>MyClass</TT>?</b><BR>
        <OL>
          <LI> Create the @em MyClass_test.C in @em source/TEST/
          <LI> Add it to @em %OpenMS/source/TEST/executables.cmake in the correct section. For a new section: register it at the bottom of the file
		  and add a target in @em %OpenMS/source/TEST/CMakeLists.txt that builds all targets of the new section.
		  A test template for your specific class can be generated by the create_test.php script found in @em %OpenMS/tools/.	
		</OL>

	    <LI><b>How do I add a new TOPP test?</b><BR>
        Add commands to @em %OpenMS/source/TEST/TOPP/CMakeLists.txt (where it fits alphabetically).

	    <LI><b>How do I add a new GUI test (for QT Gui classes) for the class <TT>MyClass</TT>?</b><BR>
        <OL>
          <LI> Create the @em MyClass_test.C in @em source/TEST/GUI
          <LI> Add it to @em %OpenMS/source/TEST/executables.cmake in the GUI section.
		  <LI> Have a look at existing GUI tests, as they use the QT TestLib framework and not the %OpenMS macros.
        </OL>		

			<LI><B>(Linux) When executing 'make test', all tests fail.</B><BR>
			Please check the LD_LIBRARY_PATH environment variable:
			- You can print the LD_LIBRARY_PATH with '<i>echo $LD_LIBRARY_PATH</i>'.
			- If your <i>&lt;%OpenMS&gt;/lib/</i> folder is included, check that <i>libOpenMS.so</i> is present.
			- With the ldd command, you can show the libraries used by an executable, e.g. '<i>ldd &lt;%OpenMS&gt;/bin/ClassTest_test</i>'.

				
		</UL>
	<H2 style="border-top:2px solid grey;">How can I speed up the compile process of %OpenMS?</H2>
		<UL>
		
	    <LI><b>Build with several threads.</b><BR>
				If you have several processors/cores you can build %OpenMS classes/tests and TOPP tools
				in in several threads.
				On Linux use the @a make option @a -j:
				<code>make -j8 %OpenMS TOPP test_build</code>
				
				On Windows, Visual Studio solution files are automatically build with the /MP flag, such that VS uses all
				available cores of the machine.
		
		</UL>
	<H2 style="border-top:2px solid grey;">Working in IDE's</H2>
		<UL>
		
			<LI><b>Why are there no source/TEST and source/APPLICATIONS/TOPP|UTILS folder?</b><BR>
				All source files added to an IDE are associated with their targets. You can find the 
				source files for each test within its own subproject.<BR>
				The same is true for the TOPP and UTILS classes.
			<LI><b>[Visual Studio] I'm getting the error "Error C2471: cannot update program database".</b><br>
				This is a bug in Visual Studio and there is a bugfix:
				<a href="http://code.msdn.microsoft.com/KB946040" target="_blank">http://code.msdn.microsoft.com/KB946040</a><br>
				Only apply it if you encounter the error. The bugfix might have unwanted side effects!
			<LI><b>[Eclipse CDT] The indexer gets stuck at some file which \#includes seqan</b><br>
				It seems that SeqAn code is just too confusing for older eclipse C++ indexers.
				You should upgrade to eclipse galileo (CDT 6.0.x).
				Also, increase the available memory limit in eclipse.ini, e.g. -Xmx1024m for one gig.
			<LI><b>[Eclipse CDT] The parser is confused after OPENMS_DLLAPI and does not recognize standard C++ headers</b><br>
				Go to Project -> Properties -> C/C++ Include Paths and Preprocessor Symbols -> Add Preprocessor symbol -> "OPENMS_DLLAPI=".
			 	This tells eclipse that the macro is defined empty.<br>
				In the same dialog you can also add an external include path to e.g. /usr/include/c++/4.3.3/, etc.
				The issue with C++ headers was fixed in the latest galileo release.
				Hints to resolve the OPENMS_DLLAPI issue using the cmake generator are welcome!
		</UL>
	<H2 style="border-top:2px solid grey;">Debugging</H2>
		<UL>
		
			<LI><b>How do I run a single test?</b><BR>
			
				You can can execute an %OpenMS class test using the CTest regular expressions:
				@n <code>&gt; ctest -V -R "^<class>_test"</code>
				@n To build a class test, you simply call the respective make target in ./source/TEST:
				@n <code>&gt; make &lt;class&gt;_test</code>
				
				To run a TOPP test, you can use:
				@n <code>&gt; ctest -V -R "TOPP_<tool>"</code>
				@n To build the tool, use:
				@n <code>&gt; make &lt;tool&gt;</code>
				
	    <LI><b>How do I debug uncaught exceptions?</b><BR>
	      There is a mechanism to have a core dumped if an uncaught
	      exception occurs.

	      To enable it, the environment variable OPENMS_DUMP_CORE has
	      to be set.

	      Each time an uncaught exception occurs, the OPENMS_DUMP_CORE
	      variable is checked and a segmentation fault is caused, if it
	      is set.


	    <LI><b>(Linux) Why is no core dumped, although a fatal error occured?</b><BR>
	      Try the @a ulimit @a -c @a unlimited command. It sets the maximum
	      size of a core to unlimited.

	      <i>Note:</i> We observed that, on some systems, no core is
	      dumped even if the size of the core file is set to unlimited.
	      We are not sure what causes this problem.


	    <LI><b>(Linux) How can I set breakpoints in @a gdb to debug %OpenMS?</b><BR>
	      Imagine you want to debug the @a TOPPView application and
	      you want it to stop at line 341 of @a SpectrumMDIWindow.C.
	      <BR>
	      <OL>
	        <LI>Run gdb:
	        <BR>
	        <TT>shell&gt; gdb TOPPView</TT>


	        <LI>Start the application (and close it):
	        <BR>
	        <TT>gdb&gt; run [arguments]</TT>


	        <LI>Set the breakpoint:
	        <BR>
	        <TT>gdb&gt; break SpectrumMDIWindow.C:341</TT>


	        <LI>Start the application again (with the same arguments):
	        <BR>
	        <TT>gdb&gt; run</TT>
	      </OL>

			<LI><B>How can I find out which shared libraries are used by an application?</B>
				<BR>
        Linux:
				<code>ldd &lt;application&gt;</code>
        <BR>
        Windows (Visual studio console):
        Try "Dependency Walker"(http://www.dependencywalker.com/) (use x86 for 32bit builds and the x64 version for 64bit builds. Using the wrong version of depends.exe will give wrong results!)
        or <code>dumpbin /DEPENDENTS OpenMS.dll</code>

			<LI><B>How can I get a list of the symbols defined in a (shared) library or object file?</B>
				<BR>
        Linux:
				<code>nm &lt;library&gt;</code>
        Use <code>nm -C</code> to switch on demangling of low-level symbols into their C++-equivalent names.
				<code>nm</code> also accepts <code>.a</code> and <code>.o</code> files.
				<BR>
        Windows (Visual studio console):
				<code>dumpbin /ALL &lt;library&gt;</code>
				<BR>
				You can use dumpbin on object files (.o) or (shared) library files (.lib) or the DLL itself
        e.g. <code>dumpbin /EXPORTS OpenMS.dll</code>

		</UL>

	<H2 style="border-top:2px solid grey;">Cross-platform thoughts</H2>
    
    %OpenMS runs on three major platforms, each one having its own ways of doing things. Here are the most
    prominent causes of "it runs on Platform A, but not on B. What now?"
    
    <UL>

	    <LI><b>Reading/Writing binary files causes different behaviour ...</b><BR>
      Usually Linux does not make a difference between text-mode and binary-mode when reading files.
      This is quite different on Windows as some bytes are interpreted as EOF, which lead might to a premature end of the reading process.
      Thus, if reading binary files make sure that you explicitly state that the file is binary when opening it!
      
      During writing in text-mode on windows a line-break (\\n) is expanded to (\\r\\n). Keep this in mind or use the eol-style property of subversion to
      ensure that line endings are correctly checked out on non-Windows systems.
      
      <LI><b>unsigned int vs size_t (UInt and Size)</b><BR>
      UInt and Size are the same on Linux GCC (i.e. both have the same size, 32bit on 32bit systems, 64bit on 64 bit systems), however on Windows this only holds
      for 32bit. On a 64bit Windows the UInt type is still 32bit, Size is (obviously) 64bit. This might lead to warnings (at best) or
      overflows and other nasty stuff. So make sure you do not rely on UInt being equal to Size - because they're not.
      
      <LI><b>Paths and system functions...</b><BR>
      This is trivial but hardcoding something like 
 @code
 String tmp_dir = "/tmp";
 @endcode
      is a big no-no! This must fail on Windows! Use Qt's QDir to get a path to the systems temporary directory if required.<br>
      Also calling things like <tt>uname</tt> which are only available on Linux: don't!<br>
      When working with files or directories, it is usually safe to use "/" on all platforms. Even Windows understands that.
      Take care of spaces in directory names though. You should always quote paths if they are used in a system call
      to ensure that the subsequent interpreter takes the spaced path as a single entity.
      
      
    </UL>
    
	<H2 style="border-top:2px solid grey;">SVN</H2>
		<UL>

	    <LI><b>The $id$ string in my test is not expanded to the SVN id. Why?</b><BR>
	      In Subversion you have to set the keyword expansion explicitly:
	      <BR><TT>svn propset svn:keywords Id &lt;file&gt;</TT>

	    <LI><b>How do I undo a commit?</b><BR>
	    	Suppose you want to undo the revision 25 in the head branch. Go to your working copy of the head branch and merge in
	    	the reversed changes of revision 25:
	    	<BR><TT>svn merge -r  25:24 https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS/ .</TT>
	    	<BR><TT>svn commit -m "Removed revision 25"</TT>


	    <LI><b>How do I create a branch?</b><BR>
	      <TT>svn copy https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/[name]/</TT>

			<LI><b>How does merging branches work?</b><BR>
				To merge changes from the <tt>source</tt> branch into the <tt>target</tt> branch, do the following:<BR>
			  <OL>
			  	<LI> Check out the <tt>target</tt> branch.
			  	<LI> Merge the desired revisions into the branch:<br>
							 <TT>svn merge -r [from]:[to] https://open-ms.svn.sourceforge.net/svnroot/open-ms/[source]</tt>
					<LI> Resolve conflicts and make sure all tests run
					<LI> Commit the changes
				</OL>
				
				<b>Example 1: From HEAD to release branch</b><br>
			  Suppose you want to merge the changes you made in revision 2325 of the 
			  HEAD (/OpenMS) into the current revision of the release branch for target branch
			  (see http://open-ms.svn.sourceforge.net/viewvc/open-ms for the actual names of branches).
			  <OL>
			  	<LI> Check out the release branch:<BR>
			  			 <TT>svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/[target]/</TT>
			  	<LI> Merge the changes into the the branch (where the <TT>rv</TT> in <TT>(rv-1):rv</TT> corresponds to your svn-revision number you just committed)<BR>
			  			 <TT>svn merge -r 2324:2325 https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS/</TT>
			  	<LI> Resolve conflicts and run tests
			  	<LI> Commit
			  </OL>
	
	 			<b>Example 2: Merge branch into HEAD</b><BR>
	 			Suppose you want to merge the changes you made to a branch into the HEAD. 
	 			The current revision is 25 and you added the branch in revision 10.
	 			<OL>
					<LI>Go to the HEAD and update it:<BR>
						<TT>cd OpenMS/</TT> (HEAD)<br>
						<TT>svn update</TT><br>
					<LI>Merge the changes in the branch into the HEAD:
	      		<TT>svn merge -r 10:25 https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/[source]/</TT>
	      	<LI> Resolve conflicts and run tests
	      	<LI> Commit
				</OL>
		
				<LI><b>How do I speed up the SVN Repo and/or upgrade to a new SVN version on the server?</b><BR>

				This should only be done if you are sure what you are doing! You might destroy the whole %OpenMS SVN!!!
				Make a backup before (preferably not on SF servers, e.g. by using
				
				$ rsync -av open-ms.svn.sourceforge.net::svn/open-ms/* .

				Now here's how you do the upgrade
				
				@code
				## login to SF
				ssh -t <yourusername>,open-ms@shell.sf.net create

				adminrepo --checkout svn

				svnadmin dump /svnroot/open-ms > oms_dump.txt
				## make a backup
				cp /svnroot/open-ms oms_backup
				## reload repo (instead of using svnadmin upgrade, which might not be optimal for performance)
				rm -rf /svnroot/open-ms/*
				svnadmin create /svnroot/open-ms
				svnadmin load /svnroot/open-ms < oms_dump.txt

				## increase speed (can be done regularly, without dump/load block above)
				svnadmin pack /svnroot/open-ms
				
				## check integrity
				svnadmin verify /svnroot/open-ms
				## get latest revision number
				svnlook youngest /svnroot/open-ms
				## check some revisions
				svnlook info -r <XXX> /svnroot/open-ms
				# e.g. 
				# svnlook info -r 100 /svnroot/open-ms
				# svnlook info -r 8635 /svnroot/open-ms

				adminrepo --save svn
				@endcode		
				
		</UL>
		
		
		
	<H2 style="border-top:2px solid grey;">Doxygen documentation</H2>
		<UL>

	    <LI><b>Where can I find the definition of the main page?</b><BR>
	    @a %OpenMS/doc/doxygen/public/Main.doxygen

	    <LI><b>Where can I add a new module?</b><BR>
	    @a %OpenMS/doc/doxygen/public/Modules.doxygen

	    <LI><b>How is the parameter documentation for classes derived from DefaultParamHandler created?</b><BR>
				You have to add your class to the program @a OpenMS/doc/doxygen/parameters/DefaultParamHandlerDocumenter.C.
				This program generates a html table with the parameters. This table can then be included into the
				class documentation using the following doxygen command:
				@code
@htmlinclude OpenMS_<class name>.parameters
				@endcode
				Note that parameter documentation is automatically generated for TOPP/UTILS included in the static ToolHandler.C tools list.
				To include TOPP/UTILS parameter documentation use following doxygen command:
				@code
@htmlinclude TOPP_<tool name>.parameters
				@endcode
				or
				@code
@htmlinclude UTILS_<tool name>.parameters
				@endcode


				You can test if everything worked by calling @a make @a doc_param_internal .
				The parameters documentation is written to @a OpenMS/doc/doxygen/parameters/output/.

	    <LI><b>How is the command line documentation for TOPP/UTILS tools created?</b><BR>
				The program @a OpenMS/doc/doxygen/parameters/TOPPDocumenter.C creates the command line documentation
				for all classes that are included in the static ToolHandler.C tools list.
				It can be included into the documentation using the following doxygen command:
				@code
@verbinclude TOPP_<tool name>.cli
				@endcode
				You can test if everything worked by calling @a make @a doc_param_internal .
				The command line documentation is written to @a OpenMS/doc/doxygen/parameters/output/.

	    <LI><b>What are the important files for adding a new tutorial section?</b><BR>
		    %OpenMS tutorial:
		    <BR>OpenMS/doc/OpenMS_tutorial/refman_overwrite.tex.in (for PDF tutorials)
		    <BR>%OpenMS/doc/doxygen/public/OpenMS_Tutorial_html.doxygen (for html tutorials)

				TOPP and TOPPView tutorial:
		    <BR>OpenMS/doc/TOPP_tutorial/refman_overwrite.tex.in (for PDF tutorials)
		    <BR>%OpenMS/doc/doxygen/public/TOPP_Tutorial_html.doxygen (for html tutorials)

		</UL>
	<H2 style="border-top:2px solid grey;">Bug fixes</H2>
		<UL>
		
			<LI><B>What is to do for a bugfix?</B>
				<UL>
					<LI> Submit the bug to the tracker (TRAC)
					<LI> Fix the bug and add a test for it in the HEAD
					<LI> Commit bugfix and test as a single commit and add the bug number to the comment.<BR>E.g.: "[FIX] Fixed bug #123"
					<LI> Close the bug in the tracker and add the the revision of the fix to the comment.<BR>E.g.: "Fixed in revision [3005]"
					<LI> Merge the revision into the current release branch (see SVN section above)
				</UL>
				
		</UL>
	<H2 style="border-top:2px solid grey;">Releases</H2>
		<UL>

			<LI><B>What has the release manager to do for a release?</B>
			<OL>
				<LI> Create release branch
				<LI> Add release branch to CDASH
				<LI> Distribute tasks among developers:
          <UL>
					<LI> Fix automatic tests
					<LI> Fix release critical bugs
					<LI> Fix compile warnings
					<LI> Fix checker violations
					<LI> Fix code analysis (e.g. cpplint, cppcheck) violations
          </UL>
				<LI> Update the list of active maintainers in tools/ACTIVE_MAINTAINERS
				<LI> Declare release candidate and distribute tasks:
					<UL> Check installation on target platforms
					<UL> Check if all installed tools can be executed
                                        <UL> Check if documentation is available and correct (e.g. version numbers)
					<UL> Check if pipelines run
					<UL> Check if interactive applications work correctly (e.g. TOPPView, TOPPAS, INIFileEditor, IDEvalutator  ...)
					<UL> Check KNIME installation on target platforms
					<UL> Check if automatic update in KNIME works
				<LI> Organise packaging
			</OL>
			<LI><B>What has each developer to do for a release?</B>
				<p>
				Each maintainer must check his/her classes and TOPP tools.
				Keep in mind that missing documentation scares off potential users!
				<p>
				Here is a list of what is to do:
				<OL>
					<LI> Remove classes not ready for release from the release branch.
					<LI> Update the CHANGELOG file (also document all parameter names of TOPP tools which have changed!
              - the easiest way to do this: take all INI files from previous release and call:
              "<tool> -write_ini bla.ini -ini <previous.ini>" and look at output)
					<LI> Check the test builds of the latest gcc/cl version for compiler warnings (32 and 64 bit)
					<LI> Check if all examples in @a OpenMS/doc/code_examples/ compile.
					<LI> Make sure the binary packages can be compiled for all platforms (see below). Between releases, the build system usually catches a bug, and you
							 need to fix this!
					<LI> Correct errors found by @a tools/checker.php.
						<UL>
							<LI> The option @a -u @a &lt;maintainer&gt; restricts the output to one maintainer
							<LI> More options are given with @a --help
						</UL>
					<LI> Documentation:
						<UL>
							<LI> %OpenMS
								<UL>
									<LI> Write / correct tutorial
									<LI> Write / correct class documentation
									<LI> Complete method documentation
								</UL>
							<LI> TOPP
								<UL>
									<LI> Write / correct tutorial
									<LI> Check if each TOPP/UTIL is listed on the TOPP/UTIL documentation page
									<LI> Write / correct doxygen documentation of each tool
									<LI> Proof-read the output of @a &lt;TOPP-tool&gt; @a --help
									<LI> Check if all parameters and sections are documented in INI files (@a -write_ini and @a INIFileEditor).
								</UL>
						</UL>
				</OL>

			<LI><B>How is a major release done?</B>
				<UL>
					<LI> Create the binary/source release packages (see below)
					<LI> Upload the Source and Binary packages to SourceForge:
						<OL>
							<LI> Go to the OpenMS' sourceforge site & log in
							<LI> Create a new folder for the release, e.g., OpenMS-1.9 and upload files to this folder
						</OL>
					<LI> Copy the HTML documentation and PDF tutorials of the release to your own FTP server (e.g., @n http://ftp.mi.fu-berlin.de/OpenMS/doc-1.9-official).
					<LI> Update the redirection rule on the website for @a http://www.openms.de/current_doxygen to point to the current documentation
					<LI> Check the function of the public search engine at @a http://www-bs2.informatik.uni-tuebingen.de/services/OpenMS-release/search.php
					<LI> Update the website (news, changelog, XML schema files, links for docu and download)
					<LI> Send a mail notification to the announcements mailing list and the general mailing list
				</UL>

				<LI><B>How is the platform-independent source release package created?</B>
					<OL>
						<LI> Year numbers update in:
							<OL>
								<LI> &lt;%OpenMS&gt;/source/COPYRIGHT
								<LI> All headers and C files and License.txt (adapt years accordingly)
										<code>
										cd &lt;%OpenMS&gt;
										find . -name "*.h" -o -name "*.C" -o -name "*.txt" | xargs sed -i 's/(C) 2003-2011/(C) 2003-2012/g' 
										</code>
							</OL>	
						<LI> Version Number update in:
							<OL>
								<LI> <TT>CMakeLists.txt</TT> of contrib.
								<LI> <TT>CMakeLists.txt</TT> of %OpenMS (three OPENMS_PACKAGE_VERSION_* variables, and the contrib version check)
								<LI> <TT>source/TEST/VersionInfo_test.C</TT>
								<LI> TOPPView and TOPPAS splash screen <TT>source/VISUAL/ICONS/</TT>.@n
									 The GIMP/PhotoShop files can be found in the @em images SVN module.
							</OL>
						<LI> Run cmake
						<LI> Make sure that the tutorial examples in <TT>doc/code_examples/</TT> can be compiled and executed (target 'Tutorials_build' and 'Tutorials_exec')
						<LI> Commit the changes to the SVN repository
						<LI> Build the documentation that is needed for the release
							<OL>
								<LI> Check out a fresh working copy of %OpenMS
								<LI> Build the library, and build the documentation using <TT>make doc</TT> (not <TT>doc_internal</TT>!).
								<LI> Build the PDF tutorials using <TT>make doc_tutorials</TT>.
								<LI> Make sure that the Parameter documentation was created (see TOPP documentation of a arbitrary TOPP tool).
								<LI> Make sure the include paths in the documentation are correct.
							</OL>
						<LI> Run the script <TT>tools/make_source_package.sh</TT> according to the help shown when executed.
						<LI> Test installation of contrib and %OpenMS from release package
					</OL>
				
				<LI><B>How is the Windows binary release package created?</B>
					<OL>
						<LI> Check out the Windows installer scripts from <TT>https://open-ms.svn.sourceforge.net/svnroot/open-ms/win_installer</TT>
						<LI> see <TT>win_installer/README</TT> for further instructions
					</OL>

				<LI><B>How are the binary release packages for different Linux distributions created?</B>
					<OL>
						<LI> Prerequisites: make sure the 'rpm' or respective package creation utilities are installed.
						<LI> Check out the release branch and contrib
						<LI> Build the contrib libraries
						<LI> Configure %OpenMS using
						     @n <code>&gt; cmake -D INSTALL_PREFIX=/usr -D PACKAGE_TYPE=rpm/deb ...</code>
            <LI> Set the environment variable 'OPENMS_DATA_PATH' to your %OpenMS share directory, e.g. <tt>/home/myusername/binary_release/OpenMS/share/OpenMS</tt>.<br>
                 Explanation follows (just read if interested):
                 When using INSTALL_PREFIX, running any %OpenMS executable before installation will result in an error because the SHARE/OpenMS directory will not be found
                 (it is already hardcoded to the future install directory). As 'make doc' etc require %OpenMS executables (TOPPDocumenter,...) this step is required.
						<LI> Build %OpenMS: <tt>make TOPP UTILS doc doc_tutorials</tt>
						<LI> Build the package using <tt>make package</tt>
						<LI> Rename the package to this naming schema:
								 @n OpenMS-&lt;version&gt;-&lt;package-nr&gt;_&lt;dist&gt;-&lt;dist-version&gt;_&lt;dist-arch&gt;.&lt;rpm/deb&gt;
					</OL>

		</UL>
	<H2 style="border-top:2px solid grey;">Profiling and memory leaks and strange behaviour</H2>
		
		<b> First check that the executable you are calling actually is the correct one (in case you have multiple %OpenMS version installed),
		and also that it uses the correct %OpenMS library (check PATH (Win) or LD_LIBRARY_PATH (Linux)).</b>
		Otherwise you might get the strangest access violations, pointing to arbitrary code.
		
		<UL>

			<LI><B>How can I profile my code?</B>
				<UL>
		  <LI> Try IBM's profiler, available for all platforms (and free for academic use): Purify(Plus) and/or Quantify.
          <LI> Windows: this is directly supported by Visual Studio (Depending on the edition: Team and above). Follow their documentation.
          <LI> Linux:
          <OL>
					  <LI> build %OpenMS in debug mode (set CMAKE_BUILD_TYPE to 'Debug')
					  <LI> call the executable with valgrind: <TT>'valgrind --tool=callgrind &lt;executable&gt; &lt;parameters&gt;'</TT>
						  <UL>
							  <LI> Note: other processes running on the same machine can influence the profiling.
							      Make sure your application gets enough resources (memory, CPU time).
							  <LI> You can start and stop the profiling while the executable is running e.g. to skip initialization steps:
								  <UL>
									  <LI> start valgrind with the option @em --instr-atstart=no
									  <LI> call <TT>'callgrind -i [on|off]'</TT> to start/stop the profiling
								  </UL>
						  </UL>
					  <LI> The output can be viewed with <TT>'kcachegrind callgrind.out.&lt;process id&gt;'</TT>
          </OL>
				</UL>

			<LI><B>(Linux) How do I check my code for memory leaks?</B>
				<OL>
					<LI>build %OpenMS in debug mode (set CMAKE_BUILD_TYPE to 'Debug')
					<LI> call the executable with valgrind: <TT>'valgrind --leak-check=full &lt;executable&gt; &lt;parameters&gt;'</TT>
					<LI> Common errors are:
						<UL>
							<LI> <TT>'Invalid write/read ...'</TT> - Violation of container boundaries
							<LI> <TT>'... depends on uninitialized variable'</TT>  - Uninitialized variables:
							<LI> <TT>'... definitely lost'</TT> - Memory leak that has to be fixed
							<LI> <TT>'... possibly lost'</TT> - Possible memory leak, so have a look at the code
						</UL>
					<LI> For more information see the valgrind documentation at http://valgrind.org/docs/manual/
				</OL>

		</UL>
	<H2 style="border-top:2px solid grey;">TOPP/UTILS</H2>
		<UL>

			<LI><B>How to create an icon file for a TOPP tool under Windows?</B>
			<OL>
				<LI> Create an <i>.ico</i> file:
					<OL>
						<LI> first, you need some graphics program (The GIMP is recommended)
						<LI> think of a motive and remind yourself that you have limited space.
					       <a href="http://msdn2.microsoft.com/en-us/library/ms997636.aspx" target="_blank">http://msdn2.microsoft.com/en-us/library/ms997636.aspx</a>
					       gives some useful hints.
						<LI> create at least a 16x16, 32x32, 48x48 and 64x64 pixel version and save each of them in a separate layer of the respective size.
								 Do not add any larger sized layers, since Win XP will not display any icon then.
						<LI> when saving your image as type <i>.ico</i> the GIMP will ask you for the color depth of each layer. As it is recommended to have
						     multiple color depths of each icon-size, go back to the layers and duplicate each layer twice. That should give you 12 layers.
						<LI> now save the image as <i>&lt;binaryname&gt;.ico</i> (e.g. TOPPView.ico) file, giving each group of equal sized layers a 32bit (8bit transparency), 8bit (1bit transparency), 4bit (1bit transparency) color depth.
								<br>Attention: make sure to assign the higher color depth to the upper layers as Windows will not pick the highest possible color otherwise.
					</OL>
				<LI> Create a resource file:
					<OL>
						<LI> Create a text file named <i>&lt;binaryname&gt;.rc</i> (e.g. TOPPView.rc)
						<LI> Insert the following line:<BR>
								 <i>101 ICON "TOPPView.ico"</i><BR>
								 , replacing TOPPView with your binary name.
					</OL>
				<LI> Put both files in <i>%OpenMS/source/APPLICATIONS/TOPP/</i> (you should find some similar files for other TOPP tools already present).
				<LI> Re-run cmake and re-link your TOPP tool.
				<LI> Voila. You should have an iconized TOPP tool.
			</OL>

			<LI><B>What do I have to do to add a new TOPP tool?</B>
			<OL>
				<LI> Add your tool (with the correct category) to getTOPPToolList() in <TT>source/APPLICATIONS/ToolHandler.C</TT>
						 @n This creates a doxygen page with the @em --help output of the tool (using TOPPDocumenter).
						 @n This page must be included at the end of the doxygen documentation of your tool (see other tools for an example).
				<LI> Add it to the TOPP docu page (in @a %doc/doxygen/public/TOPP.doxygen)
				<LI> Add the executable to the ignore list of the directory (@a svn @a propedit @a svn:ignore @a source/APPLICATION/TOPP/)
        <LI> Add the name to <TT>source/APPLICATIONS/TOPP/executables.cmake</TT>
        <LI> Write a TOPP test (add it to /source/TEST/TOPP/CMakeLists.txt)<BR>
        		 Warning: handle any kind of input files to your TOPP tool via command line flags and use the ${DATA_DIR_TOPP} prefix. You can use ini-files
        		 to specify output-files, but not input-files. Doing otherwise will break out-of-source builds.<BR>
             Hint: add "-test" to the call of your TOPP tool and also create the expected output that you put in source/TEST/TOPP with that flag active.
             The flag ensures that UniqueId's, dates etc are equal no matter where and when the tool is run.
			</OL>

			<LI><B>What do I have to do to add a new UTILS tool?</B>
			<OL>
				<LI> Add your tool to getUtilList() in <TT>source/APPLICATIONS/ToolHandler.C</TT>
						 @n This creates a doxygen page with the @em --help output of the tool (using TOPPDocumenter). 
						 @n This page must be included at the end of the doxygen documentation of your tool (see other tools for an example).
				<LI> Add it to the UTILS docu page (in @a %doc/doxygen/public/UTILS.doxygen)
				<LI> Add the executable to the ignore list of the directory (@a svn @a propedit @a svn:ignore @a source/APPLICATION/UTILS/)
        <LI> Add the name to <TT>source/APPLICATIONS/UTILS/executables.cmake</TT>
        <LI> Write a test (this is optional for UTILS). See TOPP tools above and add the test to the bottom of /source/TEST/TOPP/CMakeLists.txt.
			</OL>

		</UL>

*/

/// @endcond
