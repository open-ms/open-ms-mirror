// --------------------------------------------------------------------------
//                   OpenMS -- Open-Source Mass Spectrometry               
// --------------------------------------------------------------------------
// Copyright The OpenMS Team -- Eberhard Karls University Tuebingen,
// ETH Zurich, and Freie Universitaet Berlin 2002-2012.
// 
// This software is released under a three-clause BSD license:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of any author or any participating institution 
//    may be used to endorse or promote products derived from this software 
//    without specific prior written permission.
// For a full list of authors, refer to the file AUTHORS. 
// --------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING 
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// --------------------------------------------------------------------------
// $Maintainer:  $
// $Authors: Marc Sturm $
// --------------------------------------------------------------------------

/**

@page coding_conventions Coding conventions

<H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">Formatting</H1>

All %OpenMS files use a tab width of two. Use the command <TT>set tabstop=2</TT> in
<TT>vi</TT> or <TT>set-variable tab-width 2</TT> if you are using <TT>emacs</TT>. For
those two editors, the indentation behavior should be set automatically
through the standard file headers (see below).
Due to these ugly issues with setting the tabwidth in the editor, it is
perfectly ok not to use tabs at all.  In emacs, you can replace all tabs with
the right number of spaces by typing the following keys: <TT>C-x h</TT> (to
mark the whole buffer), then <TT>M-x untabify RET</TT>.

All lines in ASCII files (.C, .h, .cmake, ...) should have
the svn property @em svn:eol-style set to @em native, allowing native line endings on each platform.
This is desirable as Visual Studio for example will always insert CRLF even if the file is LF only, leading
to a mixed line ending style for this file. Native eol style avoids this problem.

Matching pairs of opening and closing curly braces should be set to the same
column:

@code
while (continue == true)
{
  for (int i = 0; i < 10; i++)
  {
    ...
  }

  if (x < 7)
  {
    ....
  }
}
@endcode
The main reason for this rule is to avoid constructions like:

@code
if (isValid(a))
  return 0;
@endcode

which might later be changed to something like

@code
if (isValid(a))
  error = 0;
  return 0;
@endcode

The resulting errors are hard to find. There are two ways to avoid these
problems: (a) always use braces around a block (b) write everything in a single
line. We recommend method (a).
However, this is mainly a question of personal style, so no explicit checking
is performed to enforce this rule. However, if there is an else following the
if statement the braces are mandatory! One exception is several if/else 
statements can be written as

@code
if (cond1)
{
  ...
}
else if (cond2)
{
  ...
}
else if (cond3)
{
 ...
}
else
{
  ...
}
@endcode

which is save, because the first statement in each else branch is used,
which is itself braced by the if branch.

<H2 style="margin-top:20px; border-top:1px solid grey;">Sample .h file</H2>

@code
// -*- mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
... copyright header, not shown ...
//
// --------------------------------------------------------------------------
// $Maintainer: Heinz Erhardt $
// $Authors: Heinz Erhardt $
// --------------------------------------------------------------------------

#ifndef OPENMS_KERNEL_DPEAK_H
#define OPENMS_KERNEL_DPEAK_H

#include <OpenMS/CONCEPT/Types.h>

#include <functional>
#include <sstream>

namespace OpenMS
{
   ... the actual code goes here ...
} // namespace OpenMS

#endif // OPENMS_KERNEL_DPEAK_H
@endcode
<H2 style="margin-top:20px; border-top:1px solid grey;">Sample .C file</H2>

@code
// -*- mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
... copyright header, not shown ...
//
// --------------------------------------------------------------------------
// $Maintainer: Heinz Erhardt $
// $Authors: Heinz Erhardt $
// --------------------------------------------------------------------------

#include <OpenMS/KERNEL/DPeak.h>

namespace OpenMS
{
   ... the actual code goes here ...
} // namespace OpenMS
@endcode
Every <TT>.h</TT> file must be accompanied by a <TT>.C</TT> file, even if is
just a ``dummy''.  This way a global <TT>make</TT> will
stumble across errors.
<BR>
For template classes default instances with common template arguments should be put into 
the <tt>.C</tt> file. The varaible names of these instances start with <tt>default_</tt>. 
Here an example for the <tt>DPeak</tt> class:
@code
#include <OpenMS/KERNEL/DPeak.h>

namespace OpenMS
{
  DPeak<1> default_dpeak_1;
  DPeak<2> default_dpeak_2;
}
@endcode
The compiler does instantiate the template and detects errors at compile time that
way. Doing this saves your time! Otherwise the error is detected much later, when 
the test is compiles.

<H2 style="margin-top:20px; border-top:1px solid grey;">A note on templates: when (and why) should I write an _impl.h file?</H2>

 Simply speaking, _impl.h files are for templates what .C files are for
 ordinary classes.  Remember that the definition of a class or function
 template has to be known at its point of instantiation.  Therefore the
 implementation of a template is normally contained in the .h file.  (No problem
 so far, things are even easier than for ordinary classes, because declaration
 and definition are given in the same file.  You may like this or not.) Things
 get more complicated when certain design patterns (e.g., the factory pattern)
 are used which lead to "circular dependencies".  Of course this is only a
 dependency of names, but it has to be resolved by separating declarations
 from definitions, at least for some of the member functions.  In this case, a
 .h file can be written that contains most of the definitions as well as the
 declarations of the peculiar functions. Their definition is deferred to the
 _impl.h file ("impl" for "implementation").  The _impl.h file is included only
 if the peculiar member functions have to be instantiated.  Otherwise the .h
 file should be sufficient.  No .h file should include an _impl.h file.

 
 <H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">Class requirements</H1>

Each %OpenMS class should provide the following interface:

@code
class OPENMS_DLLAPI Test
{
  public:
    
    // default constructor
    Test();

    // copy constructor
    Test(const Test& test);

    // destructor
    virtual ~Test();

    // assignment operator
    Test& operator = (const Test& test)
    {
      //ALWAYS CHECK FOR SELF ASSIGNMENT!
      if (this == &test) return *this;
      //...
      return *this;
    }
};
@endcode

There are however circumstances that allow to omit these methods:
- default constructor @n
  Can be omitted when the class is entirely dependent on some information or another class.
  In this case you should declare the default constructor private!
- destructor @n
  Should be a virtual function, unless you have a very good reason why it shouldn't.  (E.g., saving a vtable pointer.)  Essentially,
  the reason is that otherwise an <TT>operator delete</TT> invocation on a pointer to a base class will fail badly.
- copy constructor @n
  Can be omitted when it will not be used anyway, e.g. for classes that represent an algorithm.
  In this case you should declare the copy constructor private!
- assignment operator @n
  Can be omitted when it will not be used anyway, e.g. for classes that represent an algorithm.
  In this case you should declare the assignment operator private!

The OPENMS_DLLAPI macro on the first line is required for correctly building the DLL. The correct usage of this macro is explained in the OpenMS C++ guide!


<H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">General rules</H1>


<H2 style="margin-top:20px; border-top:1px solid grey;">Primitive types</H2>

%OpenMS uses its own type names for primitive types. Use only the types defined in
<TT>%OpenMS/include/%OpenMS/CONCEPT/Types.h</TT>!

<H2 style="margin-top:20px; border-top:1px solid grey;">Namespaces</H2>

The main %OpenMS classes are implemented in the namespace <TT>%OpenMS</TT>.
Auxiliary classes are implemented in <TT>%OpenMS::%Internal</TT>.
There are some other namespaces e.g. for constants and exceptions.

Importing a whole namespace in a header files is forbidden. E.g.:
@code using namespace std; //< Don't do this at home! @endcode
This could lead to name clashes when %OpenMS is used together with other libraries.
In source files (.C) it is however allowed.

<H2 style="margin-top:20px; border-top:1px solid grey;">Accessors to members</H2>

Accessors to protected or private members of a class are implemented as a pair
of get-method and set-method. This is necessary as accessors that return mutable references to a member 
cannot be wrapped with Python!

@code
class Test
{
  public:
  	// always implement a non-mutable get-method
    UInt getMember() const
    {
      return member_;
    }
    
		// always implement a set-method
    void setMember(UInt name)
    {
      name_ = member_;
    }
    
  protected:
    UInt member_;
};
@endcode

For members that are too large to be read with the get-method, modified and written back with the set-method, 
an additional non-const get-method can be implemented!
<p>
For primitive types a non-const get-method is strictly forbidden!
For more complex types it should be present only when really necessary!

@code
class Test
{
  public:
    const vector<String>& getMember() const
    {
      return member_;
    }
    
    void setMember(const vector<String>& name)
    {
      name_ = member_;
    }
		
		// if absolutely necessary implement a mutable get-method
    vector<String>& getMember()
    {
      return member_;
    }

  protected:
    vector<String> member_;
};
@endcode

<H2 style="margin-top:20px; border-top:1px solid grey;">Use of the STL</H2>

Many %OpenMS classes base on STL classes. 
However, only the C++ Standard Library part of the STL must be used.
This means that SGI extensions like <tt>hash_set</tt>, <tt>hash_multiset</tt>, <tt>hash_map</tt> 
and <tt>hash_multimap</tt> are not allowed!

<H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">Exception handling</H1>

No %OpenMS program should dump a core if an error occurs. Instead, it should
attempt to die as gracefully as possible. Furthermore, as %OpenMS is a
framework rather than an application, it should give the programmer ways to
catch and correct errors.
The recommended procedure to handle - even fatal - errors is to throw an exception. Uncaught
exception will result in a call to <TT>abort</TT> thereby terminating the
program.

<H2 style="margin-top:20px; border-top:1px solid grey;">Exception classes</H2>

All exceptions used in %OpenMS are derived from <TT>Exception::Base</TT>
defined in <TT>CONCEPT/Exception.h</TT>. A default constructor should not be
implemented for these exceptions. Instead, the constructor of all derived
exceptions should have the following signature:

@code
  AnyException(const char* file, int line, const char* function[, ...]);
@endcode
Additional arguments are possible but should provide default values (see
<TT>IndexOverflow</TT> for an example).

<H2 style="margin-top:20px; border-top:1px solid grey;">Throwing exceptions</H2>

The <TT>throw</TT> directive for each exception should be of the form
@code
  throw AnyException(__FILE__, __LINE__, __PRETTY_FUNCTION__);
@endcode

to simplify debugging.  <TT>__FILE__</TT> and <TT>__LINE__</TT> are standard-defined
preprocessor macros.  The symbol <TT>__PRETTY_FUNCTION__</TT> works similar to a
<code>char*</code> and contains the type signature of the function as well as its
bare name, if the GNU compiler is being used.  It is defined to
<code>&lt;unknown&gt;</code> on other platforms. Exception::Base provides methods
(<TT>getFile</TT>, <TT>getLine</TT>, <TT>getFunction</TT>) that allow the localization
of the exception's cause.

<H2 style="margin-top:20px; border-top:1px solid grey;">Catching exceptions</H2>

As usual with C++, the standard way to catch an exception should be by reference (and <i>not</i> by value).
@code
  try
  {
    // some code which might throw
  }
  catch ( Exception& e)
  {
    // Handle the exception, then possibly re-throw it:
    // throw;  // the modified e
  }
@endcode

<H2 style="margin-top:20px; border-top:1px solid grey;">Specifying exceptions</H2>
Exceptions are <b>not specified in the code</b> using the throw statement, as this forces the
compiler to check that only the specified exceptions are thrown. This check not only increases
the runtime, but may prevent efficient optimization of the code by the compiler.
<p>
However, thrown <b>exceptions must be documented</b> to tell the user which exceptions can be caught.
@verbatim
/**
  @brief Silly function

  @exception Exception::Foo is always thrown
*/
void myFunction()
{
  throw Foo(__FILE__, __LINE__, __PRETTY_FUNCTION__);
}
@endverbatim

<H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">Naming conventions</H1>

Reserved words of the C++ language and symbols defined e. g. in the STL or in
the standard C library must not be used as names for classes or class members.
Even if the compiler accepts it, such words typically mess up the syntax
highlighting and are confusing for other developers, to say the least.  Bad
examples include: set, map, exp, log.  (All developers: Add your favorites to
this list whenever you stumble upon them!)

<H2 style="margin-top:20px; border-top:1px solid grey;">File names</H2>

Header files and source files should be named as the classes they
contain.
Source files end in ".C", while header files end in ".h". File names should be
capitalized exactly as the class they contain (see below). Each header/source
file should contain one class only, although exceptions are possible for
light-weight classes.
<H2 style="margin-top:20px; border-top:1px solid grey;">Underscores</H2>

Usage of underscores in names has two different meanings: A trailing ``_'' at
the end indicates that something is protected or private to a class.  Apart
from that, different parts of a name are sometimes separated by an underscore,
and sometimes separated by capital letters.  (The details are explained below.)

Note that according to the C++ standard, names that start with an underscore
are reserved for internal purposes of the language and its standard library
(roughly speaking), so you should never use them.
<H2 style="margin-top:20px; border-top:1px solid grey;">Class / type / namespace names</H2>
Class names and type names always start with a capital letter.
Different parts of the name are separated by capital letters at the beginning
of the word. No underscores are allowed in type names and class names, except
for the names of protected types and classes in classes, which are suffixed by
an underscore.  The same conventions apply for <TT>namespace</TT>s.

@code
class Simple; //ordinary class
class SimpleThing; //ordinary class
class PDBFile; //using an abbreviation
class Buffer_; //protected or private nested class
class ForwardIteratorTraits_; //protected or private nested class
@endcode


<H2 style="margin-top:20px; border-top:1px solid grey;">Variable names</H2>

Variable names are all lower case letters.  Distinguished parts of
the name are separated using underscores ``<TT>_</TT>''. If parts of the name
are derived from common acronyms (e.g. MS) they should be in upper case.
Private or protected member variables of classes are suffixed by an
underscore.

@code
int simple; //ordinary variable
bool is_found; //ordinary variable
string MS_instrument; //using an abbreviation
int counter_; //protected or private member
int persistent_id_; //protected or private member
@endcode

No prefixing or suffixing is allowed to identify the variable type - this
leads to completely illegible documentation and overly long variable names.
<H2 style="margin-top:20px; border-top:1px solid grey;">Function names/method names  </H2>

Function names (including class method names) always start with a
  lower case letter.  Parts of the name are separated using capital letters
(as are types and class names).  They should be comprehensible, but as short
as possible.  The same variable names must be used in the declaration and in
the definition.  Arguments that are actually not used in the implementation of
a function have to be commented out - this avoids compiler warnings.  The
argument of <TT>void</TT> functions (empty argument list) must omitted in both
the declaration and the definition.  If function arguments are pointers or
references, the pointer or reference qualifier is appended to the variable
type. It should not prefix the variable name.

@code
void hello(); //ordinary function, no arguments
int countPeaks(PeakArray const& p); //ordinary function
bool ignore(string& /* name */); //ordinary function with an unused argument
bool isAdjacentTo(Peak const * const * const & p) const; //an ordinary function
bool doSomething_(int i, string& name); //protected or private member function
@endcode
<H2 style="margin-top:20px; border-top:1px solid grey;">Enums and preprocessor constants</H2>

Enumerated values and preprocessor constants are all upper case
  letters.  Parts of the name are separated by underscores.

@code
#define MYCLASS_SUPPORTS_MIN_MAX 0 //preprocessor constant
enum DimensionId { DIM_MZ = 0, DIM_RT = 1 }; //enumerated values
enum DimensionId_ { MZ = 0, RT = 1 }; //enumerated values
@endcode

(You should avoid using the preprocessor anyway.  Normally, <TT>const</TT> and
<TT>enum</TT> will suffice unless something very special.)
<H2 style="margin-top:20px; border-top:1px solid grey;">Parameters</H2>

Parameters in .ini files and elsewhere follow these conventions:
<UL>
	<LI> They consist of lower-case letters and underscores only.
	<LI> For numerical parametes the range of reasonable values is given.
	<LI> Where applicable units are given in the description.
</UL>
This rule applies to all kinds of parameter strings, both keys and string-values.

<H2 style="margin-top:20px; border-top:1px solid grey;">Data files</H2>
The correct capitalization of all data file extensions supported by OpenMS in documented
in FileHandler::NamesOfTypes[]. The convention is to use only lowercase letters
for file extensions. There are three exceptions: "ML" and "XML" are written
in uppercase letters and "mzData" keeps its capital "D". Please remember to
keep this consistent when adding new data files or writing new TOPP tools
or UTILS (use correct capitalization for file type restrictions, here).

<H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">Documentation</H1>

<H2 style="margin-top:20px; border-top:1px solid grey;">UML diagrams</H2>

To generate UML diagrams use yEd and export the diagrams in png format. Do not
forget to save also the corresponding .yed file.
<H2 style="margin-top:20px; border-top:1px solid grey;">Doxygen  </H2>

Each %OpenMS class has to be documented using Doxygen. The documentation is
inserted in Doxygen format in the header file where the class is
defined.  Documentation includes the description of the class, of each method,
type declaration, enum declaration, each constant, and each member variable.

Longer pieces of documentation start with a brief description, followed
by an empty line and a detailed description. The empty line is needed to separate
the brief from the detailed description.

Descriptions of classes always have a brief section!

Please use the doxygen style of the following example for %OpenMS:
@verbatim
/**
  @defgroup DummyClasses Dummy classes

  @brief This class contains dummy classes

  Add classes by using the '@ingroup' command.
*/

/**
  @brief Demonstration class.

  A demonstration class for teaching doxygen

  @note All classes need brief description!

  @ingroup DummyClasses
*/

class Test
{
  public:
    /**
      @brief An enum type.

      The documentation block cannot be put after the enum!
    */
    enum EnumType
    {
      int EVal1,     ///< Enum value 1.
      int EVal2      ///< Enum value 2.
    };

    /**
      @brief constructor.

      A more elaborate description of the constructor.
    */
    Test();

    /**
      @brief Dummy function.

      A normal member taking two arguments and returning an integer value.
      The parameter @p dummy_a is an integer.
      @param dummy_a an integer argument.
      @param dummy_s a constant character pointer.
      @see Test()
      @return The dummy results.
    */
    int dummy(int dummy_a, const char *dummy_s);

    /// Brief description in one line.
    int isDummy();

    /**
      @name Group of members.

      Description of the group.
    */
    //@{
    /// Dummy 2.
    void dummy2();
    /// Dummy 3.
    void dummy3();
    //@}

  protected:
    int value;       ///< An integer value.
};
@endverbatim

The defgroup command indicates that a comment block contains documentation for a group of classes, files or namespaces.
This can be used to categorize classes, files or namespaces, and document those categories.
You can also use groups as members of other groups, thus building a hierarchy of groups.
Using the ingroup command a comment block of a class, file or namespace will be added to the group or groups.

The groups (or modules as doxygen calls them) definded by the ingroup command should contain only the classes 
of special interest to the %OpenMS user. Helper classes and such must be omitted.

Documentation which does not belong to a specific .C or .h file can be written into a
separate Doxygen file (with the ending .doxygen). This file will also be parsed by Doxygen.

Open tasks are noted in the documentation of a header or a group using the todo command.
The ToDo list is then shown in the doxygen menu under 'Related pages'. Each ToDo should be
followed by a name in parentheses to indicated who is going to handle it.

These commands should be used as well:
 - @b \@todo Necessary todo for the the next release. Should be done as soon as possible. 
 			@n Please add the name of the responsible person in parentheses!
 - @b \@improvement Possible improvement, but not really necessary.
 			@n Please add the name of the responsible person in parentheses!
 - @b \@deprecated Deprecated class, that must be removed in the next release.
 - @b \@experimental Experimental class, that will perhaps not make it to the library.
 - @b \@bug Decrription of a bug in the class/method. 
 			@n Please add the name of the finder in parentheses!

Doxygen is not hard to learn, have a look at the manual :-)


<H2 style="margin-top:20px; border-top:1px solid grey;">Commenting code</H2>

The code for each .C file has to be commented. Each piece of code in %OpenMS
has to contain at least 5% of comments. The use of @verbatim// Comment text@endverbatim instead of
C style comments @verbatim /* Comment text */ @endverbatim is recommended to avoid problems arising from
nested comments. Comments should be written in plain english and describe the functionality of the next few lines.

<H2 style="margin-top:20px; border-top:1px solid grey;">Examples</H2>

Instructive programming examples can be provided in the
<TT>doc/code_examples</TT> directory.

<H2 style="margin-top:20px; border-top:1px solid grey;">Revision control</H2>

%OpenMS uses Subversion to manage different
versions of the source files. For easier identification of the responsible person
each %OpenMS file contains the <TT>$Maintainer:$</TT> string in the
preamble.

Examples of <TT>.h</TT> and <TT>.C</TT> files have been given above.  In
non-C++ files (Makefiles, (La)TeX-Files, etc.) the C++ comments are replaced
by the respective comment characters (e.g. ``#'' for Makefiles, ``%'' for
(La)TeX).  TeX will switch to math mode after a <TT>$</TT>, but you can work
around this by writing something like

<TT>Latest SVN $ $Date:$ $</TT>
if you want to use it in texts; the one here expands to
``Latest SVN Date: 2007-01-19 13:47:36 +0100 (Fri, 19 Jan 2007) ''. Subversion does not turn on keyword substitution by default.  See <TT>svn
  -h propset</TT> and <TT>svn -h proplist</TT> for details.

<H1 style="margin-top:40px; border-top:4px solid grey; text-align:left;">Testing</H1>

<H2 style="margin-top:20px; border-top:1px solid grey;">General</H2>

Each %OpenMS class has to provide a test program. This test program has to check
each method of the class. The test programs reside in the directory
<TT>source/TEST</TT> are usually named <TT>&lt;classname&gt;_test.C</TT>. The test program has to be coded using the class test
macros as described in the %OpenMS online reference. Special care should be taken
to cover all special cases (e.g. what happens, if a method is called with
empty strings, negative values, zero, null pointers etc.).
Please activate the keyword substitution of '$Id$' for all tests with the following command:
<TT>svn propset svn:keywords Id &lt;file&gt;</TT>.

<H2 style="margin-top:20px; border-top:1px solid grey;">Suplementary files</H2>

If a test needs suplementary files, put these files in the <TT>source/TEST/data/</TT> folder.
The name of suplementary files has to begin with the name of the tested class.

<H2 style="margin-top:20px; border-top:1px solid grey;">Structure of a test program</H2>

<H3>Macros to start, finish and evaluate tests</H3>

<UL>
	<LI><TT>START_TEST(class_name, version)</TT><BR> Start of a class test file (initialization)
	<LI><TT>END_TEST()</TT><BR> End of a class test file (cleanup)
	<LI><TT>START_SECTION(name)</TT><BR> Start of a method test. If the name starts with '[EXTRA]' it does not have to match a methods name.
	<LI><TT>END_SECTION()</TT><BR> End of a single test
	<LI><TT>STATUS(message)</TT><BR> Shows a status message e.g. used to show the progress of a test preparations that take a while
	<LI><TT>ABORT_IF(condition)</TT><BR> Skip remainder of substest if condition holds
</UL>

<H3>Comparison macros</H3>

<UL>
	<LI><TT>TEST_EQUAL(a, b)</TT><BR> Tests if two expressions are equal
	<LI><TT>TEST_NOT_EQUAL(a, b)</TT><BR> Tests if two expressions are not equal
	<LI><TT>TEST_REAL_SIMILAR(a, b)</TT><BR> Tests if two real numbers are equal (within a margin)
	<LI><TT>TEST_STRING_EQUAL(a, b)</TT><BR> Tests if @em a and @em b are equal as strings
	<LI><TT>TEST_STRING_SIMILAR(a, b)</TT><BR> Tests if @em a and @em b are similar as strings - allowing numerical deviations and differing whitespaces
	<LI><TT>TOLERANCE_ABSOLUTE(double)</TT><BR> Sets the absolute difference allowed when testing floating point numbers
	<LI><TT>TOLERANCE_RELATIVE(double)</TT><BR> Sets the relative difference allowed when testing floating point numbers
	<LI><TT>TEST_EXCEPTION(exception, expression)</TT><BR> Tests if the expression throws the exception
	<LI><TT>TEST_EXCEPTION_WITH_MESSAGE(exception, expression, message)</TT><BR> Tests if the expression throws the exception and if the exception has the message
	<LI><TT>TEST_FILE_EQUAL(file, template_file)</TT><BR> Tests if two files are identical
	<LI><TT>TEST_FILE_SIMILAR(file, template_file)</TT><BR> Tests if two files are similar - allowing numerical deviations and differing whitespaces
</UL>

Do not use methods with side-effects inside the comparison macros i.e. *(it++). The expressions
in the macro are called serveral times, so the side-effect is triggered several times as well.

<H3>Temporary files</H3>

You might want to create temporary files during the tests. The following macro
puts a temporary filename into the string argument. The file is automatically deleted
after the test.

All temporary files are validated using the XML schema,if the type of file 
can be determined by FileHandler. Therefor for each file written in a test
NEW_TMP_FILE should be called. Otherwise only the last writen file is checked.

<UL>
  <LI><TT>NEW_TMP_FILE(string)</TT>
</UL>

<H3>Tools for testing and checking your code.</H3>

There are also some PHP tools for testing other tasks in the <TT>tools/</TT> directory.
See <TT>tools/README</TT> for details!




<H2 style="margin-top:20px; border-top:1px solid grey;">Testing the TOPP programs</H2>

The abbreviation TOPP stands for The %OpenMS Proteomics Pipeline, a collection of tools based upon the
C++ classes in %OpenMS.  The TOPP tools are located in <TT>source/APPLICATIONS/TOPP</TT>.

<H3>Creating a test</H3>

The tests for a TOPP tool are simple commands which can be found in <tt>source/TEST/TOPP/CMakeLists.txt</TT>.
To add a new test simply follow the examples given in that file.
If a test needs suplementary input files, put these files in the same folder.
The name of suplementary files has to begin with the name of the tested tool.
All extensions but <TT>.tmp</TT> are possible.


<H3>Building the tests</H3>

In order to build the tests, execute the target "tests_build" (in VisualStudio based solution files,
this target is available in the <TT>source/TEST/OpenMS_tests.sln</TT> solution, not in the <TT>OpenMS.sln</TT>)
This will build the TOPP tools, UTILS and Unit-tests. Building the TOPP tools alone is not sufficient (you need FuzzyDiff - a UTIL to run the tests).

<H3>Running the tests</H3>

%OpenMS uses CTest to run its tests. You can invoke the <TT>ctest</TT> executable in the %OpenMS binary directory and it will run all
tests (including TOPP tests). To run a specific test use the <TT>ctest -R &lt;testname&gt;</TT>, e.g. <TT>ctest -R TOPP_FileMerger</TT>
to run all FileMerger tests.
You can add <TT>-V</TT> or <TT>-VV</TT> to ctest to make the output more verbose.


<H3>Numerical inaccuracy</H3>

The TOPP tests will be run on 32 bit and 64 bit platforms.  Therefore a purely
character-based comparison of computed and expected result files might fail
although the results are in fact numerically correct - think of cases like
<TT>9.999e+3</TT> vs. <TT>1.0001e+4</TT>.  Instead we provide a small program <TT>FuzzyDiff</TT>
as a UTIL.  This program steps
through both inputs simultaneously and classifies each position into 3
categories: <I>numbers</I>, <I>characters</I>, <I>whitespace</I>.  Within each
line of input, numbers are compared with respect to their ratio (i.e.,
relative error), characters must match exactly (e.g. case is significant) and
all whitespace is considered equal.  Empty lines or lines containing only
whitespace are skipped, but extra linebreaks 'within' lines will result in error
messages. You can also define a "whitelist" of terms, which makes FuzzyDiff ignore lines where these terms occur (useful for hardcoded filepaths etc).
For more details and verbosity options, see the built-in help message and the source code.


<H3>File name conventions for TOPP tests</H3>

Each test relies on a number of files.  These file should be named 
<code>source/TEST/TOPP/&lt;toolname&gt;_&lt;nummer&gt;_&lt;name&gt;.&lt;extension&gt;</code>, where

<UL>
  <LI><code>&lt;toolname&gt;</code> has the form <code>[A-Z][a-zA-Z]*</code>; this is the name of the TOPP tool
  <LI><code>&lt;number&gt;</code> has the form <code>[0-9]+</code>; this is the running number of the test
  <LI><code>&lt;name&gt;</code> has the form <code>[-_a-zA-Z0-9]+</code>; this should be a
    descriptive name (characters <code>_</code> and <code>-</code> are ok here, since <code>&lt;toolname&gt;</code>
    and <code>&lt;number&gt;</code> must not contain them)
  <LI><code>&lt;extension&gt;</code>; this is the extension expressing the type of the data.
</UL>
The data files should be as small as possible, but not totally trivial.


<H2 style="margin-top:20px; border-top:1px solid grey;">Is testing really necessary?</H2>

Yes. Testing is crucial to verify the correctness of the library - especially when
using C++. But why has it to be <EM>so</EM> complicated, using all these macros
and stuff? One of the biggest problems when building large class frameworks is
portability. C++ compilers are strange beasts and there is not a single one
that accepts the same code as any other compiler. Since one of the main
concerns of %OpenMS is portability, we have to ensure that every single line of
code compiles on all platforms. Due to the long compilation times and the
(hopefully in future) large number of different platforms, tests to verify the
correct behaviour of all classes have to be carried out automatically. This
implies a well defined interface for all tests, which is the reason for all
these strange macros. This fixed format also enforces the writing of complete
class tests. Usually a programmer writes a few lines of code to test the parts
of the code he wrote for correctness. Of the methods tested after the
introduction of the test macros, about a tenth of all functions/methods showed
severe errors or after thorough testing. Most of these errors didn't occur an
all platforms or didn't show up on trivial input.

Writing tests for <EM>each</EM> method of a class also ensures that each line is
compiled. When using class templates the compiler only compiles the methods
called. Thus it is possible that a code segment contains syntactical errors
but the compiler accepts the code happily - he simply ignores most of the
code. This is quickly discovered in a complete test of all methods. The same
is true for configuration dependend preprocessor directives that stem from
platform dependencies. Often untested code also hides inside the <TT>const</TT>
version of a method, when there is a non-const method with the same name and
arguments (for example most of the <TT>getName</TT>) methods in %OpenMS. In most
cases, the non-const version is preferred by the compiler and it is usually
not clear to the user which version is taken. Again, explicit testing of each
single method provides help for this problem.
The ideal method to tackle the problem of untested code is the complete
coverage analysis of a class. Unfortunately this is only supported for very
few compilers, so it is not used for testing %OpenMS.


One last point: writing the
test program is a wonderful opportunity to verify and complete the
documentation! Often enough implementation details are not clear at the time
the documentation is written. A lot of side effects or special cases that were
added later do not appear in the documentation. Going through the
documentation and the implementation in parallel is the best way to verify the
documentation for consistence and (strange coincidence?!) the best way to
implement a test program, too!

*/
